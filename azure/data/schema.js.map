{"version":3,"sources":["../../data/schema.js"],"names":["globalId","type","id","obj","GraphQLTodo","GraphQLUser","nodeInterface","nodeField","name","fields","text","resolve","complete","additional","Math","floor","random","comments","interfaces","nodeType","TodosConnection","connectionType","GraphQLTodoEdge","edgeType","todos","args","status","defaultValue","totalCount","length","completedCount","Query","viewer","user","node","GraphQLAddTodoMutation","inputFields","outputFields","todoEdge","localTodoId","todo","cursor","mutateAndGetPayload","GraphQLChangeTodoStatusMutation","GraphQLMarkAllTodosMutation","changedTodos","changedTodoLocalIds","map","GraphQLRemoveCompletedTodosMutation","deletedTodoIds","deletedTodoLocalIds","bind","GraphQLRemoveTodoMutation","deletedTodoId","GraphQLRenameTodoMutation","Mutation","addTodo","changeTodoStatus","markAllTodos","removeCompletedTodos","removeTodo","renameTodo","schema","query","mutation"],"mappings":"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","file":"schema.js","sourcesContent":["/**\n * This file provided by Facebook is for non-commercial testing and evaluation\n * purposes only.  Facebook reserves all rights not expressly granted.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\n\nimport {\n  connectionArgs,\n  connectionDefinitions,\n  connectionFromArray,\n  cursorForObjectInConnection,\n  fromGlobalId,\n  globalIdField,\n  mutationWithClientMutationId,\n  nodeDefinitions,\n  toGlobalId,\n} from 'graphql-relay';\n\nimport {\n  Todo,\n  User,\n  addTodo,\n  changeTodoStatus,\n  getTodo,\n  getTodos,\n  getUser,\n  getViewer,\n  markAllTodos,\n  removeCompletedTodos,\n  removeTodo,\n  renameTodo,\n} from './database';\n\nimport { globalIdField_unibet, fromGlobalId_unibet } from './unibetIds';\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  (globalId) => {\n    const { type, id } = fromGlobalId_unibet(globalId);\n    if (type === 'Todo') {\n      return getTodo(id);\n    } else if (type === 'User') {\n      return getUser(id);\n    }\n    return null;\n  },\n  (obj) => {\n    if (obj instanceof Todo) {\n      return GraphQLTodo;\n    } else if (obj instanceof User) {\n      return GraphQLUser;\n    }\n    return null;\n  }\n);\n\nconst GraphQLTodo = new GraphQLObjectType({\n  name: 'Todo',\n  fields: {\n    id: globalIdField_unibet('Todo'),\n    text: {\n      type: GraphQLString,\n      resolve: (obj) => obj.text,\n    },\n    complete: {\n      type: GraphQLBoolean,\n      resolve: (obj) => obj.complete,\n    },\n    additional: {\n      type: GraphQLString,\n      resolve: () => `additional #${Math.floor(Math.random() * 100)} `,\n    },\n    comments: {\n      type: GraphQLString,\n      resolve:() => `comments #${Math.floor(Math.random() * 100)} `\n    },\n  },\n  interfaces: [nodeInterface],\n});\n\nconst {\n  connectionType: TodosConnection,\n  edgeType: GraphQLTodoEdge,\n} = connectionDefinitions({\n    name: 'Todo',\n    nodeType: GraphQLTodo,\n  });\n\nconst GraphQLUser = new GraphQLObjectType({\n  name: 'User',\n  fields: {\n    id: globalIdField_unibet('User'),\n    todos: {\n      type: TodosConnection,\n      args: {\n        status: {\n          type: GraphQLString,\n          defaultValue: 'any',\n        },\n        ...connectionArgs,\n      },\n      resolve: (obj, { status, ...args }) =>\n        connectionFromArray(getTodos(status), args),\n    },\n    totalCount: {\n      type: GraphQLInt,\n      resolve: () => getTodos().length,\n    },\n    completedCount: {\n      type: GraphQLInt,\n      resolve: () => getTodos('completed').length,\n    },\n  },\n  interfaces: [nodeInterface],\n});\n\nconst Query = new GraphQLObjectType({\n  name: 'Query',\n  fields: {\n    viewer: {\n      type: new GraphQLObjectType({\n        name: 'Viewer', // this will trigger viewerhandler\n        fields: {\n          user: {\n            type: GraphQLUser,\n            resolve: () => getViewer(),\n          },\n        },\n      }),\n      resolve: () => ({}),\n    },\n    node: nodeField,\n  },\n});\n\nconst GraphQLAddTodoMutation = mutationWithClientMutationId({\n  name: 'AddTodo',\n  inputFields: {\n    text: { type: new GraphQLNonNull(GraphQLString) },\n  },\n  outputFields: {\n    todoEdge: {\n      type: GraphQLTodoEdge,\n      resolve: ({ localTodoId }) => {\n        const todo = getTodo(localTodoId);\n        return {\n          cursor: cursorForObjectInConnection(getTodos(), todo),\n          node: todo,\n        };\n      },\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({ text }) => {\n    const localTodoId = addTodo(text);\n    return { localTodoId };\n  },\n});\n\nconst GraphQLChangeTodoStatusMutation = mutationWithClientMutationId({\n  name: 'ChangeTodoStatus',\n  inputFields: {\n    complete: { type: new GraphQLNonNull(GraphQLBoolean) },\n    id: { type: new GraphQLNonNull(GraphQLID) },\n  },\n  outputFields: {\n    todo: {\n      type: GraphQLTodo,\n      resolve: ({ localTodoId }) => getTodo(localTodoId),\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({ id, complete }) => {\n    const localTodoId = fromGlobalId_unibet(id).id;\n    changeTodoStatus(localTodoId, complete);\n    return { localTodoId };\n  },\n});\n\nconst GraphQLMarkAllTodosMutation = mutationWithClientMutationId({\n  name: 'MarkAllTodos',\n  inputFields: {\n    complete: { type: new GraphQLNonNull(GraphQLBoolean) },\n  },\n  outputFields: {\n    changedTodos: {\n      type: new GraphQLList(GraphQLTodo),\n      resolve: ({ changedTodoLocalIds }) => changedTodoLocalIds.map(getTodo),\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({ complete }) => {\n    const changedTodoLocalIds = markAllTodos(complete);\n    return { changedTodoLocalIds };\n  },\n});\n\n// TODO: Support plural deletes\nconst GraphQLRemoveCompletedTodosMutation = mutationWithClientMutationId({\n  name: 'RemoveCompletedTodos',\n  outputFields: {\n    deletedTodoIds: {\n      type: new GraphQLList(GraphQLString),\n      resolve: ({ deletedTodoIds }) => deletedTodoIds,\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: () => {\n    const deletedTodoLocalIds = removeCompletedTodos();\n    const deletedTodoIds = deletedTodoLocalIds.map(toGlobalId.bind(null, 'Todo'));\n    return { deletedTodoIds };\n  },\n});\n\nconst GraphQLRemoveTodoMutation = mutationWithClientMutationId({\n  name: 'RemoveTodo',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n  },\n  outputFields: {\n    deletedTodoId: {\n      type: GraphQLID,\n      resolve: ({ id }) => id,\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({ id }) => {\n    const localTodoId = fromGlobalId_unibet(id).id;\n    removeTodo(localTodoId);\n    return { id };\n  },\n});\n\nconst GraphQLRenameTodoMutation = mutationWithClientMutationId({\n  name: 'RenameTodo',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    text: { type: new GraphQLNonNull(GraphQLString) },\n  },\n  outputFields: {\n    todo: {\n      type: GraphQLTodo,\n      resolve: ({ localTodoId }) => getTodo(localTodoId),\n    },\n  },\n  mutateAndGetPayload: ({ id, text }) => {\n    const localTodoId = fromGlobalId_unibet(id).id;\n    renameTodo(localTodoId, text);\n    return { localTodoId };\n  },\n});\n\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addTodo: GraphQLAddTodoMutation,\n    changeTodoStatus: GraphQLChangeTodoStatusMutation,\n    markAllTodos: GraphQLMarkAllTodosMutation,\n    removeCompletedTodos: GraphQLRemoveCompletedTodosMutation,\n    removeTodo: GraphQLRemoveTodoMutation,\n    renameTodo: GraphQLRenameTodoMutation,\n  },\n});\n\nexport const schema = new GraphQLSchema({\n  query: Query,\n  mutation: Mutation,\n});\n"]}