{"version":3,"sources":["../../data/schema.js"],"names":["globalId","type","id","obj","GraphQLTodo","GraphQLUser","nodeInterface","nodeField","name","fields","text","resolve","complete","additional","Math","floor","random","comments","interfaces","nodeType","TodosConnection","connectionType","GraphQLTodoEdge","edgeType","todos","args","status","defaultValue","_","totalCount","length","completedCount","echo","Query","viewer","user","node","GraphQLAddTodoMutation","inputFields","outputFields","todoEdge","localTodoId","todo","cursor","mutateAndGetPayload","GraphQLChangeTodoStatusMutation","GraphQLMarkAllTodosMutation","changedTodos","changedTodoLocalIds","map","GraphQLRemoveCompletedTodosMutation","deletedTodoIds","deletedTodoLocalIds","bind","GraphQLRemoveTodoMutation","deletedTodoId","GraphQLRenameTodoMutation","Mutation","addTodo","changeTodoStatus","markAllTodos","removeCompletedTodos","removeTodo","renameTodo","GraphqlTodoSubscription","arg","subscribe","context","subscript2RabbitMQ","undefined","getPayload","Subscription","todoSubScription","schema","query","mutation","subscription"],"mappings":"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","file":"schema.js","sourcesContent":["import {\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\n\nimport {\n  connectionArgs,\n  connectionDefinitions,\n  connectionFromArray,\n  cursorForObjectInConnection,\n  fromGlobalId,\n  globalIdField,\n  mutationWithClientMutationId,\n  nodeDefinitions,\n  toGlobalId,\n} from 'graphql-relay';\n\nimport {\n  subscriptionWithClientId,\n} from 'graphql-relay-subscription';\n\nimport {\n  Todo,\n  User,\n  addTodo,\n  changeTodoStatus,\n  getTodo,\n  getTodos,\n  getUser,\n  getViewer,\n  markAllTodos,\n  removeCompletedTodos,\n  removeTodo,\n  renameTodo,\n} from './database';\n\nimport {globalIdField_unibet, fromGlobalId_unibet} from './unibetIds';\n\n\nconst {nodeInterface, nodeField} = nodeDefinitions(\n  (globalId) => {\n    const {type, id} = fromGlobalId_unibet(globalId);\n    if (type === 'Todo') {\n      return getTodo(id);\n    } else if (type === 'User') {\n      return getUser(id);\n    }\n    return null;\n  },\n  (obj) => {\n    if (obj instanceof Todo) {\n      return GraphQLTodo;\n    } else if (obj instanceof User) {\n      return GraphQLUser;\n    }\n    return null;\n  }\n);\n\nconst GraphQLTodo = new GraphQLObjectType({\n  name: 'Todo',\n  fields: {\n    id: globalIdField_unibet('Todo'),\n    text: {\n      type: GraphQLString,\n      resolve: (obj) => obj.text,\n    },\n    complete: {\n      type: GraphQLBoolean,\n      resolve: (obj) => obj.complete,\n    },\n    additional: {\n      type: GraphQLString,\n      resolve: () => `additional #${Math.floor(Math.random() * 100)} `,\n    },\n    comments: {\n      type: GraphQLString,\n      resolve: () => `comments #${Math.floor(Math.random() * 100)} `,\n    },\n  },\n  interfaces: [nodeInterface],\n});\n\nconst {\n  connectionType: TodosConnection,\n  edgeType: GraphQLTodoEdge,\n} = connectionDefinitions({\n  name: 'Todo',\n  nodeType: GraphQLTodo,\n});\n\nconst GraphQLUser = new GraphQLObjectType({\n  name: 'User',\n  fields: {\n    id: globalIdField_unibet('User'),\n    todos: {\n      type: TodosConnection,\n      args: {\n        status: {\n          type: GraphQLString,\n          defaultValue: 'any',\n        },\n        ...connectionArgs,\n      },\n      resolve: (obj, {status, _, ...args}) =>\n        connectionFromArray(getTodos(status), args),\n    },\n    totalCount: {\n      type: GraphQLInt,\n      resolve: () => getTodos().length,\n    },\n    completedCount: {\n      type: GraphQLInt,\n      resolve: () => getTodos('completed').length,\n    },\n    echo: {\n      type: GraphQLInt,\n      args: {\n        _: {\n          type: GraphQLInt,\n          defaultValue: 0,\n        },\n      },\n      resolve: (obj, {_}) => _,\n    },\n  },\n  interfaces: [nodeInterface],\n});\n\nconst Query = new GraphQLObjectType({\n  name: 'Query',\n  fields: {\n    viewer: {\n      type: new GraphQLObjectType({\n        name: 'Viewer', // this will trigger viewerhandler\n        fields: {\n          user: {\n            type: GraphQLUser,\n            resolve: () => getViewer(),\n          },\n        },\n      }),\n      resolve: () => ({}),\n    },\n    node: nodeField,\n  },\n});\n\nconst GraphQLAddTodoMutation = mutationWithClientMutationId({\n  name: 'AddTodo',\n  inputFields: {\n    text: {type: new GraphQLNonNull(GraphQLString)},\n  },\n  outputFields: {\n    todoEdge: {\n      type: GraphQLTodoEdge,\n      resolve: ({localTodoId}) => {\n        const todo = getTodo(localTodoId);\n        return {\n          cursor: cursorForObjectInConnection(getTodos(), todo),\n          node: todo,\n        };\n      },\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({text}) => {\n    const localTodoId = addTodo(text);\n    return {localTodoId};\n  },\n});\n\nconst GraphQLChangeTodoStatusMutation = mutationWithClientMutationId({\n  name: 'ChangeTodoStatus',\n  inputFields: {\n    complete: {type: new GraphQLNonNull(GraphQLBoolean)},\n    id: {type: new GraphQLNonNull(GraphQLID)},\n  },\n  outputFields: {\n    todo: {\n      type: GraphQLTodo,\n      resolve: ({localTodoId}) => getTodo(localTodoId),\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({id, complete}) => {\n\n    const localTodoId = fromGlobalId_unibet(id).id;\n    changeTodoStatus(localTodoId, complete);\n    return {localTodoId};\n  },\n});\n\nconst GraphQLMarkAllTodosMutation = mutationWithClientMutationId({\n  name: 'MarkAllTodos',\n  inputFields: {\n    complete: {type: new GraphQLNonNull(GraphQLBoolean)},\n  },\n  outputFields: {\n    changedTodos: {\n      type: new GraphQLList(GraphQLTodo),\n      resolve: ({changedTodoLocalIds}) => changedTodoLocalIds.map(getTodo),\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({complete}) => {\n    const changedTodoLocalIds = markAllTodos(complete);\n    return {changedTodoLocalIds};\n  },\n});\n\n// TODO: Support plural deletes\nconst GraphQLRemoveCompletedTodosMutation = mutationWithClientMutationId({\n  name: 'RemoveCompletedTodos',\n  outputFields: {\n    deletedTodoIds: {\n      type: new GraphQLList(GraphQLString),\n      resolve: ({deletedTodoIds}) => deletedTodoIds,\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: () => {\n    const deletedTodoLocalIds = removeCompletedTodos();\n    const deletedTodoIds = deletedTodoLocalIds.map(toGlobalId.bind(null, 'Todo'));\n    return {deletedTodoIds};\n  },\n});\n\nconst GraphQLRemoveTodoMutation = mutationWithClientMutationId({\n  name: 'RemoveTodo',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n  },\n  outputFields: {\n    deletedTodoId: {\n      type: GraphQLID,\n      resolve: ({id}) => id,\n    },\n    viewer: {\n      type: GraphQLUser,\n      resolve: () => getViewer(),\n    },\n  },\n  mutateAndGetPayload: ({id}) => {\n    const localTodoId = fromGlobalId_unibet(id).id;\n    removeTodo(localTodoId);\n    return {id};\n  },\n});\n\nconst GraphQLRenameTodoMutation = mutationWithClientMutationId({\n  name: 'RenameTodo',\n  inputFields: {\n    id: {type: new GraphQLNonNull(GraphQLID)},\n    text: {type: new GraphQLNonNull(GraphQLString)},\n  },\n  outputFields: {\n    todo: {\n      type: GraphQLTodo,\n      resolve: ({localTodoId}) => getTodo(localTodoId),\n    },\n  },\n  mutateAndGetPayload: ({id, text}) => {\n    const localTodoId = fromGlobalId_unibet(id).id;\n    renameTodo(localTodoId, text);\n    return {localTodoId};\n  },\n});\n\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addTodo: GraphQLAddTodoMutation,\n    changeTodoStatus: GraphQLChangeTodoStatusMutation,\n    markAllTodos: GraphQLMarkAllTodosMutation,\n    removeCompletedTodos: GraphQLRemoveCompletedTodosMutation,\n    removeTodo: GraphQLRemoveTodoMutation,\n    renameTodo: GraphQLRenameTodoMutation,\n  },\n});\n\n\n\nconst GraphqlTodoSubscription = subscriptionWithClientId({\n  name: 'TodoSubScription',\n  inputFields: () => ({\n    arg: {type: GraphQLString},\n  }),\n  outputFields: () => ({\n    arg: {type: GraphQLString}, // useless, just for demo purpose \n    todo: { //useful!!\n      type: GraphQLTodo,\n      resolve: ({localTodoId}) => {\n        return typeof localTodoId !== 'undefined' ? getTodo(localTodoId) : null;\n      },\n    },\n  }),\n  //subscription mode;\n  subscribe: async ({arg}, context) => {\n    const {subscript2RabbitMQ} = context;\n    subscript2RabbitMQ();\n    return {localTodoId: undefined, arg};\n  },\n  //payload mode (event emitter mode)\n  getPayload: async ({localTodoId}, {arg}) => {\n    return {localTodoId, arg};\n  },\n});\n\nconst Subscription = new GraphQLObjectType({\n  name: 'Subscription',\n  fields: {\n    todoSubScription: GraphqlTodoSubscription,\n  },\n});\n\n\n\nexport const schema = new GraphQLSchema({\n  query: Query,\n  mutation: Mutation,\n  subscription: Subscription,\n});\n\n\n\n"]}