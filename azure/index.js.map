{"version":3,"sources":["../server.js"],"names":[],"mappings":";;;;;;AAIA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;AAGA;AACA;AAlBA;AACA;AACA;AACA;AAgBA,IAAM,eAAe,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAAzC;AACA;;AATA;AACA;AASA,IAAM,gBAAgB,wBAAtB;AACA,cAAc,GAAd,CAAkB,qBAAW,IAAX,EAAlB;AACA,cAAc,GAAd,CAAkB,GAAlB,EAAuB,8BAAY,EAAC,sBAAD,EAAS,UAAU,IAAnB,EAAyB,QAAQ,IAAjC,EAAZ,CAAvB;AACA,IAAM,aAAa,cAAc,MAAd,CAAqB,YAArB,EAAmC;AAAA,SAAM,QAAQ,GAAR,wDACL,YADK,CAAN;AAAA,CAAnC,CAAnB;;AAIA,IAAM,KAAK,sBAAG,UAAH,CAAX;AACA,GAAG,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC5B,SAAO,EAAP,CAAU,sBAAV;AAAA,uEAAkC,iBAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACL,8BAAoB,SAApB,CAA8B,OAA9B,EAAuC,0BAAkB;AAClF,uBAAO,IAAP,CAAY,sBAAZ,EAAoC,cAApC;AACD,eAF0B,CADK;;AAAA;AAC5B,4BAD4B;;AAIhC,qBAAO,IAAP,CAAY,sBAAZ,EAAoC,cAApC;;AAJgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;;AAAA;AAAA;AAAA;AAAA;AAMD,CAPD","file":"index.js","sourcesContent":["// append below line before graphQLServer.use('/'...)\n//graphQLServer.use(_express2.default.static('./public'));  //iis-node set current directory to 'azure'\n// require('babel-polyfill'); doesn't work!\n//If you are using ES6’s import syntax in your application’s entry point, you should instead import the polyfill at the top of the entry point to ensure the polyfills are loaded first\nimport 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport graphQLHTTP from 'express-graphql';\nimport {schema} from './data/schema';\nimport IO from 'socket.io';\nimport subscriptionHandler from './server/subscriptionHandler';\n//if you don't have below line, nodemon won't re-load generateSchemaJson, \n//and as such your old schema.json is used\nimport './scripts/updateSchema';\n//******************************* end import  *************************************************/\n\n\n//however you don't have to explicitly call the generateSchemaJSON method, as it's automatically \n//callel everytime the file is loaded (node loads that module)\nconst GRAPHQL_PORT = process.env.port || 8081;\n// Expose a GraphQL endpoint\nconst graphQLServer = express();\ngraphQLServer.use(bodyParser.json());\ngraphQLServer.use('/', graphQLHTTP({schema, graphiql: true, pretty: true}));\nconst httpServer = graphQLServer.listen(GRAPHQL_PORT, () => console.log(\n  `GraphQL Server is now running on http://localhost:${GRAPHQL_PORT}`\n));\n\nconst io = IO(httpServer);\nio.on('connection', socket => {\n  socket.on('graphql:subscription', async request => {\n    var initialPayload = await subscriptionHandler.subscribe(request, updatedPayload => {\n      socket.emit('graphql:subscription', updatedPayload);\n    });\n    socket.emit('graphql:subscription', initialPayload);\n  });\n});\n\n"]}